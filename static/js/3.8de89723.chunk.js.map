{"version":3,"sources":["components/Profile/MyPost/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/MyPost.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/MyPost/ProfileInfo/Status/StatusWithHooks.tsx","components/Profile/MyPost/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/MyPost/ProfileInfo/ProfileDataForm/ProfileData.tsx","components/Profile/MyPost/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","StatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","type","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","profile","goToEditMode","saveProfile","initialValues","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","userId","photos","small","large","validate","values","errors","length","onSubmit","console","log","handleSubmit","touched","createField","name","Object","keys","map","k","className","s","contact","ProfileData","isOwner","onClick","contactKey","contactValue","Contact","ProfileInfo","flagEditMode","Preloader","mode","ava","src","userphoto","target","files","savePhoto","errortext","errorMessage","Post","item","message","like","likecount","MyPost","React","memo","PostElement","posts","reverse","p","id","onAddPost","NewPost","addPost","MyPostForm","formik","useFormik","inputError","input","handleChange","button","disabled","spanError","MyPostContainer","connect","state","profilepage","dispatch","addPostActionCreator","Profile","ProfileAPIComponent","this","match","params","String","loginUserId","history","push","getProfileUser","getUserStatus","refreshProfile","prevProps","updateUserStatus","Component","ProfileContainer","compose","isAuth","auth","setUsersProfile","withRouter"],"mappings":"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","file":"static/js/3.8de89723.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pole\":\"ProfileInfo_pole__2nPq_\",\"ava\":\"ProfileInfo_ava__2Cbzz\",\"contact\":\"ProfileInfo_contact__31c6p\",\"errortext\":\"ProfileInfo_errortext__3x_iP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"MyPost_input__ZrBw3\",\"button\":\"MyPost_button__3iwd6\",\"inputError\":\"MyPost_inputError__2CQe3\",\"spanError\":\"MyPost_spanError__SlFqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1M6TF\",\"like\":\"Post_like__24D2a\"};","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\n\r\n\r\ntype StatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const StatusWithHooks: React.FC<StatusType> = (props) => {\r\n\r\n    let [editMode,setEditMode]=useState(false)\r\n    let [status,setStatus]=useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n   const activateEditMode=()=>{\r\n       setEditMode(true)\r\n   }\r\n   const deactivateEditMode=()=>{\r\n       setEditMode(false)\r\n       props.updateStatus(status)\r\n   }\r\n   const onStatusChanged=(e:ChangeEvent<HTMLInputElement>)=>{\r\n       setStatus(e.currentTarget.value)\r\n   }\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n                </div>}\r\n                {editMode &&\r\n                <div>\r\n                    <input type=\"text\" onChange={onStatusChanged} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n","import {ProfileType} from \"../../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {Field, Formik} from \"formik\";\r\nimport {createField} from \"../../../../../utils/form-helper\";\r\nimport s from \"../ProfileInfo.module.css\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    saveProfile: (profile: ProfileType) => void\r\n    goToEditMode: (mode: boolean) => void\r\n    profile: ProfileType\r\n\r\n}\r\n\r\ntype ErrorsType = {\r\n    fullName?: string\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    aboutMe?: string\r\n}\r\nexport const ProfileDataForm = ({profile, goToEditMode, saveProfile}: ProfileDataFormType) => {\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                aboutMe: profile.aboutMe,\r\n                contacts: {\r\n                    facebook: profile.contacts.facebook,\r\n                    website: profile.contacts.website,\r\n                    vk: profile.contacts.vk,\r\n                    twitter: profile.contacts.twitter,\r\n                    instagram: profile.contacts.instagram,\r\n                    youtube: profile.contacts.youtube,\r\n                    github: profile.contacts.github,\r\n                    mainLink: profile.contacts.mainLink\r\n                },\r\n                lookingForAJob: profile.lookingForAJob,\r\n                lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                fullName: profile.fullName,\r\n                userId: profile.userId,\r\n                photos: {\r\n                    small: profile.photos.small,\r\n                    large: profile.photos.large\r\n                }\r\n            }}\r\n            validate={values => {\r\n                const errors: ErrorsType = {};\r\n                if (values.fullName.length > 15) {\r\n                    errors.fullName = \"max length 20\"\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values) => {\r\n                console.log(\"ddd\")\r\n                saveProfile((values))\r\n                goToEditMode(false)\r\n\r\n            }}>\r\n            {({\r\n                  handleSubmit,\r\n                  errors,\r\n                  touched,\r\n              }) => (\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    {createField(\"text\", \"fullName\", \"fullName\", errors.fullName, touched.fullName, \"fullName\", \"div\")}\r\n                    <div>\r\n                        <Field type=\"checkbox\" name=\"lookingForAJob\"/>\r\n                    </div>\r\n                    {createField(\"text\", \"lookingForAJobDescription\", \"lookingForAJobDescription\", errors.lookingForAJobDescription, touched.lookingForAJobDescription, \"lookingForAJobDescription\", \"div\")}\r\n                    {createField(\"text\", \"aboutMe\", \"aboutMe\", errors.aboutMe, touched.aboutMe, \"aboutMe\", \"div\")}\r\n                    <div>\r\n                        <div><b>Contacts:</b>{Object.keys(profile.contacts).map((k) => {\r\n                            return <div key={k} className={s.contact}>\r\n                                <b>{k}:{createField(\"text\", `contacts.${k}`, k, `contacts.${k}`, false, k, \"div\")}</b>\r\n                            </div>\r\n                        })}\r\n                        </div>\r\n\r\n                        <button type=\"submit\">\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}","import {ContactsType, ProfileType} from \"../../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport s from \"../ProfileInfo.module.css\";\r\n\r\ntype ProfileDataType={\r\n    profile: ProfileType\r\n    isOwner:boolean\r\n    goToEditMode:(mode:boolean)=>void\r\n\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataType> = ({profile,isOwner,goToEditMode,}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={()=>goToEditMode(true)}>edit</button>}\r\n            <p><b>Name:</b>{profile.fullName}</p>\r\n            <p><b>Looking for a job:</b>{profile.lookingForAJob ? \"yes\" : \"no\"}</p>\r\n            {profile.lookingForAJob && <p><b>My professional skills:</b>{profile.lookingForAJobDescription}</p>}\r\n            <p><b>About me:</b>{profile.aboutMe}</p>\r\n            <p><b>Contacts:</b>{Object.keys(profile.contacts).map((k)=> <Contact key={k} contactKey={k}\r\n                                                                                 contactValue={profile.contacts[k as keyof ContactsType]}/>)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype ContactType = {\r\n    contactKey:string\r\n    contactValue: null|string\r\n}\r\n\r\nconst Contact: React.FC<ContactType> = ({contactKey, contactValue}) => {\r\n\r\n    return (\r\n        <p className={s.contact}><b>{contactKey}:</b>{contactValue}</p>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Preloader} from \"../../../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {StatusWithHooks} from \"./Status/StatusWithHooks\";\r\nimport userphoto from \"../../../../assets/images/images.jpg\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileDataForm/ProfileData\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../../redux/redux-store\";\r\n\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo:File) => void\r\n    saveProfile:(profile:ProfileType)=>void\r\n    errorMessage:string\r\n    flagEditMode:boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, status, updateStatus,saveProfile,flagEditMode, ...props}) => {\r\n    let [editMode,setEditMode]=useState( false)\r\n// const flagEditMode = useSelector<RootStateType,boolean>(state => state.profilepage.flagEditMode)\r\n    useEffect(()=>{\r\n        if(flagEditMode){\r\n            setEditMode(true)\r\n        }else{\r\n            setEditMode(false)\r\n        }\r\n\r\n    },[flagEditMode])\r\n\r\n\r\n    console.log(flagEditMode,'FLAGEDITMODE')\r\n    console.log(editMode)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    let goToEditMode=(mode:boolean)=>{\r\n        setEditMode(mode)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.ava}>\r\n                <img src={profile.photos.small || userphoto}/>\r\n                <div>\r\n                    {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                    <StatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                    {editMode ?\r\n                        // <button onClick={()=>saveProfile(profile)}>!!!!!!!!!!!!!!</button>\r\n                        <ProfileDataForm saveProfile={saveProfile} goToEditMode={goToEditMode}  profile={profile}/>\r\n                        :<ProfileData profile={profile} isOwner={props.isOwner}  goToEditMode={goToEditMode}/>}\r\n                    <p className={s.errortext}>{props.errorMessage}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostTypeMap} from \"../../../../redux/Store\";\r\n\r\n\r\n\r\n\r\nexport const Post:React.FC<PostTypeMap>= (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTluB_KJTFuFjPv37y1r9ANOA8s60vcfoM5YA&usqp=CAU\"/>\r\n            {props.message}\r\n            <div className={s.like}>\r\n                {props.likecount}\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTsHRX8t1HF3K4RA3EZk-icklePWdLpfAUlBOzsapp7pZdfdl-_ZYkkVllttQATUl-sao&usqp=CAU\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport s from \"./MyPost.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\n\r\n\r\nexport type TypeMyPost = {\r\n    posts: PostType[]\r\n    addPost: (NewPost: string) => void\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<TypeMyPost>=React.memo((props)=> {\r\n\r\n    let PostElement =[...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likecount={p.likecount}/>)\r\n\r\n\r\n    let onAddPost = (NewPost: string) => {\r\n        props.addPost(NewPost);\r\n    }\r\n    return (\r\n        <div>\r\n            <MyPostForm onAddPost={onAddPost}/>\r\n            <div>\r\n                {PostElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\ntype MyPostFormProps = {\r\n    onAddPost: (NewPost: string) => void\r\n}\r\n\r\ntype MyPostFormErrors = {\r\n    NewPost?: string\r\n}\r\nconst MyPostForm = (props: MyPostFormProps) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            NewPost: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: MyPostFormErrors = {};\r\n            if (values.NewPost.length > 15) {\r\n                errors.NewPost = \"max length 15\"\r\n            }\r\n            return errors\r\n        },\r\n\r\n\r\n        onSubmit: values => {\r\n            props.onAddPost(values.NewPost)\r\n        },\r\n\r\n    });\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <input\r\n            className={formik.errors.NewPost ? s.inputError : s.input}\r\n            id=\"NewPost\"\r\n            name=\"NewPost\"\r\n            type=\"text\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.NewPost}\r\n        />\r\n\r\n        <button type=\"submit\" className={s.button} disabled={!!formik.errors.NewPost}>Отправить</button>\r\n        {formik.errors && <span className={s.spanError}>{formik.errors.NewPost}</span>}\r\n    </form>\r\n\r\n}\r\n","import React from \"react\";\r\nimport {addPostActionCreator, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {ActionValuesType, RootStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapDispatch = {\r\n    addPost: (NewPost:string) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    posts: PostType[],\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilepage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionValuesType) => void): MapDispatch => {\r\n    return {\r\n        addPost: (NewPost:string) => {\r\n            dispatch(addPostActionCreator(NewPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport {ProfileInfo} from \"./MyPost/ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto:(photo:File)=>void\r\n    saveProfile:(profile:ProfileType)=>void\r\n    errorMessage:string\r\n    flagEditMode:boolean\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                {...props}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileUser,\r\n    getUserStatus,\r\n    ProfileType,\r\n    setUsersProfile,\r\n    updateUserStatus,\r\n    savePhoto,\r\n    saveProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    loginUserId: null | number\r\n    errorMessage: string\r\n    flagEditMode: boolean\r\n}\r\ntype  MapDispatch = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    getProfileUser: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype ProfileAPIType = MapDispatch & MapStateToProps\r\n\r\ntype PathParams = {\r\n    userId: string\r\n\r\n}\r\ntype PropsType = RouteComponentProps<PathParams> & ProfileAPIType\r\n\r\nexport class ProfileAPIComponent extends React.Component <PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.loginUserId)\r\n\r\n            if (userId === \"null\") {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfileUser(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.flagEditMode, 'EDIT_FLAG')\r\n        this.refreshProfile()\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.props.errorMessage)\r\n        return (\r\n\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateUserStatus}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n                     errorMessage={this.props.errorMessage}\r\n                     flagEditMode={this.props.flagEditMode}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n    return {\r\n        profile: state.profilepage.profile,\r\n        status: state.profilepage.status,\r\n        isAuth: state.auth.isAuth,\r\n        loginUserId: state.auth.userId,\r\n        errorMessage: state.profilepage.errorMessage,\r\n        flagEditMode: state.profilepage.flagEditMode\r\n    }\r\n}\r\n\r\nconst ProfileContainer = compose<ComponentType>(connect(mapStateToProps,\r\n    {\r\n        setUsersProfile,\r\n        getProfileUser,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }), withRouter)(ProfileAPIComponent)\r\n\r\nexport default ProfileContainer"],"sourceRoot":""}