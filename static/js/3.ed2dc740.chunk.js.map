{"version":3,"sources":["components/Profile/MyPost/MyPost.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/MyPost/ProfileInfo/Status/StatusWithHooks.tsx","components/Profile/MyPost/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/MyPost/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","StatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","type","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","ava","src","photos","small","fullName","aboutMe","Preloader","Post","item","message","like","likecount","MyPost","React","memo","PostElement","posts","reverse","map","p","id","onAddPost","NewPost","addPost","MyPostForm","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","handleSubmit","inputError","input","name","handleChange","button","disabled","spanError","MyPostContainer","connect","state","profilepage","dispatch","addPostActionCreator","Profile","ProfileAPIComponent","userId","this","match","params","String","loginUserId","history","push","getProfileUser","getUserStatus","updateUserStatus","Component","ProfileContainer","compose","isAuth","auth","setUsersProfile","withRouter"],"mappings":"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","file":"static/js/3.ed2dc740.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"MyPost_input__ZrBw3\",\"button\":\"MyPost_button__3iwd6\",\"inputError\":\"MyPost_inputError__2CQe3\",\"spanError\":\"MyPost_spanError__SlFqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1M6TF\",\"like\":\"Post_like__24D2a\"};","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\n\r\n\r\ntype StatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const StatusWithHooks: React.FC<StatusType> = (props) => {\r\n\r\n    let [editMode,setEditMode]=useState(false)\r\n    let [status,setStatus]=useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n   const activateEditMode=()=>{\r\n       setEditMode(true)\r\n   }\r\n   const deactivateEditMode=()=>{\r\n       setEditMode(false)\r\n       props.updateStatus(status)\r\n   }\r\n   const onStatusChanged=(e:ChangeEvent<HTMLInputElement>)=>{\r\n       setStatus(e.currentTarget.value)\r\n   }\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n                </div>}\r\n                {editMode &&\r\n                <div>\r\n                    <input type=\"text\" onChange={onStatusChanged} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n","import React, {PropsWithChildren} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Preloader} from \"../../../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {StatusWithHooks} from \"./Status/StatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile,status,updateStatus,...props}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.ava}>\r\n                <img src={profile.photos.small}/>\r\n                <div>\r\n                    <p>{profile.fullName}</p>\r\n                    <p>{profile.aboutMe}</p>\r\n                </div>\r\n                <StatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostTypeMap} from \"../../../../redux/Store\";\r\n\r\n\r\n\r\n\r\nexport const Post:React.FC<PostTypeMap>= (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTluB_KJTFuFjPv37y1r9ANOA8s60vcfoM5YA&usqp=CAU\"/>\r\n            {props.message}\r\n            <div className={s.like}>\r\n                {props.likecount}\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTsHRX8t1HF3K4RA3EZk-icklePWdLpfAUlBOzsapp7pZdfdl-_ZYkkVllttQATUl-sao&usqp=CAU\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport s from \"./MyPost.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\n\r\n\r\nexport type TypeMyPost = {\r\n    posts: PostType[]\r\n    addPost: (NewPost: string) => void\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<TypeMyPost>=React.memo((props)=> {\r\n\r\n    let PostElement =[...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likecount={p.likecount}/>)\r\n\r\n\r\n    let onAddPost = (NewPost: string) => {\r\n        props.addPost(NewPost);\r\n    }\r\n    return (\r\n        <div>\r\n            <MyPostForm onAddPost={onAddPost}/>\r\n            <div>\r\n                {PostElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\ntype MyPostFormProps = {\r\n    onAddPost: (NewPost: string) => void\r\n}\r\n\r\ntype MyPostFormErrors = {\r\n    NewPost?: string\r\n}\r\nconst MyPostForm = (props: MyPostFormProps) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            NewPost: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: MyPostFormErrors = {};\r\n            if (values.NewPost.length > 15) {\r\n                errors.NewPost = \"max length 15\"\r\n            }\r\n            return errors\r\n        },\r\n\r\n\r\n        onSubmit: values => {\r\n            props.onAddPost(values.NewPost)\r\n        },\r\n\r\n    });\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <input\r\n            className={formik.errors.NewPost ? s.inputError : s.input}\r\n            id=\"NewPost\"\r\n            name=\"NewPost\"\r\n            type=\"text\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.NewPost}\r\n        />\r\n\r\n        <button type=\"submit\" className={s.button} disabled={!!formik.errors.NewPost}>Отправить</button>\r\n        {formik.errors && <span className={s.spanError}>{formik.errors.NewPost}</span>}\r\n    </form>\r\n\r\n}\r\n","import React from \"react\";\r\nimport {addPostActionCreator, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {ActionValuesType, RootStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapDispatch = {\r\n    addPost: (NewPost:string) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    posts: PostType[],\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilepage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionValuesType) => void): MapDispatch => {\r\n    return {\r\n        addPost: (NewPost:string) => {\r\n            dispatch(addPostActionCreator(NewPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport {ProfileInfo} from \"./MyPost/ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                {...props}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileUser,\r\n    getUserStatus,\r\n    ProfileType,\r\n    setUsersProfile,\r\n    updateUserStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    loginUserId: null | number\r\n}\r\ntype  MapDispatch = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    getProfileUser: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileAPIType = MapDispatch & MapStateToProps\r\n\r\ntype PathParams = {\r\n    userId: string\r\n\r\n}\r\ntype PropsType = RouteComponentProps<PathParams> & ProfileAPIType\r\n\r\nexport class ProfileAPIComponent extends React.Component <PropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            // userId=this.props.loginUserId прояснить ,,,,,,.................\r\n            userId = String(this.props.loginUserId)\r\n\r\n            if (userId === \"null\") {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfileUser(userId)\r\n        this.props.getUserStatus(userId)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateUserStatus}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n    return {\r\n        profile: state.profilepage.profile,\r\n        status: state.profilepage.status,\r\n        isAuth: state.auth.isAuth,\r\n        loginUserId: state.auth.userId\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent=(props:PropsType)=>{//3 обертка редирект\r\n//     if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n//     return <ProfileAPIComponent {...props}/>\r\n// }\r\n\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileAPIComponent)//3 обертка редирект самописный хок\r\n//\r\n// let withRouterContainerComponent = withRouter(AuthRedirectComponent as ComponentType<RouteComponentProps>)//2 обертка виз роутер\r\n// //с денисом нашли типизацию в случае если внутри хока класс на функциональной работало и так\r\n// export const ProfileContainer = connect(mapStateToProps, {//1 обертка коннект редакс\r\n//     setUsersProfile,\r\n//     getProfileUser\r\n// })(withRouterContainerComponent)\r\n\r\nconst ProfileContainer = compose<ComponentType>(connect(mapStateToProps,\r\n    {\r\n        setUsersProfile,\r\n        getProfileUser,\r\n        getUserStatus,\r\n        updateUserStatus\r\n    }), withRouter)(ProfileAPIComponent)\r\n\r\nexport default ProfileContainer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pole\":\"ProfileInfo_pole__2nPq_\",\"ava\":\"ProfileInfo_ava__2Cbzz\"};"],"sourceRoot":""}