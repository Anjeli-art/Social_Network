{"version":3,"sources":["components/Profile/MyPost/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/MyPost.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/MyPost/ProfileInfo/Status/StatusWithHooks.tsx","components/Profile/MyPost/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/MyPost/ProfileInfo/ProfileDataForm/ProfileData.tsx","components/Profile/MyPost/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","StatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","type","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","profile","saveProfile","initialValues","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","userId","photos","small","large","validate","values","errors","length","onSubmit","handleSubmit","touched","createField","name","Object","keys","map","k","className","s","contact","ProfileData","isOwner","goToEditMode","onClick","contactKey","contactValue","Contact","ProfileInfo","flagEditMode","flagEditModeSelector","useSelector","state","profilepage","dispatch","useDispatch","Preloader","ava","src","userphoto","target","files","savePhoto","setProfileFlag","errortext","errorMessage","Post","item","message","like","likecount","MyPost","React","memo","PostElement","posts","reverse","p","id","onAddPost","NewPost","addPost","MyPostForm","formik","useFormik","inputError","input","handleChange","button","disabled","spanError","MyPostContainer","connect","addPostActionCreator","Profile","ProfileAPIComponent","this","match","params","String","loginUserId","history","push","getProfileUser","getUserStatus","refreshProfile","prevProps","updateUserStatus","Component","compose","isAuth","auth","setUsersProfile","withRouter"],"mappings":"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","file":"static/js/3.dc9722ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pole\":\"ProfileInfo_pole__2nPq_\",\"ava\":\"ProfileInfo_ava__2Cbzz\",\"contact\":\"ProfileInfo_contact__31c6p\",\"errortext\":\"ProfileInfo_errortext__3x_iP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"MyPost_input__ZrBw3\",\"button\":\"MyPost_button__3iwd6\",\"inputError\":\"MyPost_inputError__2CQe3\",\"spanError\":\"MyPost_spanError__SlFqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1M6TF\",\"like\":\"Post_like__24D2a\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype StatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const StatusWithHooks: React.FC<StatusType> = (props) => {\r\n\r\n        let [editMode, setEditMode] = useState(false)\r\n        let [status, setStatus] = useState(props.status)\r\n\r\n         useEffect(()=>{\r\n             setStatus(props.status)\r\n\r\n         },[props.status])\r\n\r\n        const activateEditMode = () => {\r\n            setEditMode(true)\r\n        }\r\n        const deactivateEditMode = () => {\r\n            setEditMode(false)\r\n            props.updateStatus(status)\r\n        }\r\n        const onStatusChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setStatus(e.currentTarget.value)\r\n        }\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n                </div>}\r\n                {editMode &&\r\n                <div>\r\n                    <input type=\"text\" onChange={onStatusChanged} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n","\r\nimport React from \"react\";\r\nimport {Field, Formik} from \"formik\";\r\nimport {createField} from \"../../../../../utils/form-helper\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../../redux/types\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    saveProfile: (profile: ProfileType) => void\r\n    profile: ProfileType\r\n\r\n}\r\n\r\ntype ErrorsType = {\r\n    fullName?: string\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    aboutMe?: string\r\n}\r\nexport const ProfileDataForm = ({profile, saveProfile}: ProfileDataFormType) => {\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                aboutMe: profile.aboutMe,\r\n                contacts: {\r\n                    facebook: profile.contacts.facebook,\r\n                    website: profile.contacts.website,\r\n                    vk: profile.contacts.vk,\r\n                    twitter: profile.contacts.twitter,\r\n                    instagram: profile.contacts.instagram,\r\n                    youtube: profile.contacts.youtube,\r\n                    github: profile.contacts.github,\r\n                    mainLink: profile.contacts.mainLink\r\n                },\r\n                lookingForAJob: profile.lookingForAJob,\r\n                lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                fullName: profile.fullName,\r\n                userId: profile.userId,\r\n                photos: {\r\n                    small: profile.photos.small,\r\n                    large: profile.photos.large\r\n                }\r\n            }}\r\n            validate={values => {\r\n                const errors: ErrorsType = {};\r\n                if (values.fullName.length > 15) {\r\n                    errors.fullName = \"max length 20\"\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values) => {\r\n                saveProfile((values))\r\n\r\n            }}>\r\n            {({\r\n                  handleSubmit,\r\n                  errors,\r\n                  touched,\r\n              }) => (\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    {createField(\"text\", \"fullName\", \"fullName\", errors.fullName, touched.fullName, \"fullName\", \"div\")}\r\n                    <div>\r\n                        <Field type=\"checkbox\" name=\"lookingForAJob\"/>\r\n                    </div>\r\n                    {createField(\"text\", \"lookingForAJobDescription\", \"lookingForAJobDescription\", errors.lookingForAJobDescription, touched.lookingForAJobDescription, \"lookingForAJobDescription\", \"div\")}\r\n                    {createField(\"text\", \"aboutMe\", \"aboutMe\", errors.aboutMe, touched.aboutMe, \"aboutMe\", \"div\")}\r\n                    <div>\r\n                        <div><b>Contacts:</b>{Object.keys(profile.contacts).map((k) => {\r\n                            return <div key={k} className={s.contact}>\r\n                                <b>{k}:{createField(\"text\", `contacts.${k}`, k, `contacts.${k}`, false, k, \"div\")}</b>\r\n                            </div>\r\n                        })}\r\n                        </div>\r\n\r\n                        <button type=\"submit\">\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}","\r\nimport React from \"react\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport {ContactsType,ProfileType} from \"../../../../../redux/types\";\r\n\r\ntype ProfileDataType={\r\n    profile: ProfileType\r\n    isOwner:boolean\r\n    goToEditMode:()=>void\r\n\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataType> = ({profile,isOwner,goToEditMode,}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={()=>goToEditMode()}>edit</button>}\r\n            <p><b>Name:</b>{profile.fullName}</p>\r\n            <p><b>Looking for a job:</b>{profile.lookingForAJob ? \"yes\" : \"no\"}</p>\r\n            {profile.lookingForAJob && <p><b>My professional skills:</b>{profile.lookingForAJobDescription}</p>}\r\n            <p><b>About me:</b>{profile.aboutMe}</p>\r\n            <p><b>Contacts:</b>{Object.keys(profile.contacts).map((k)=> <Contact key={k} contactKey={k}\r\n                                                                                 contactValue={profile.contacts[k as keyof ContactsType]}/>)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype ContactType = {\r\n    contactKey:string\r\n    contactValue: null|string\r\n}\r\n\r\nconst Contact: React.FC<ContactType> = ({contactKey, contactValue}) => {\r\n\r\n    return (\r\n        <p className={s.contact}><b>{contactKey}:</b>{contactValue}</p>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Preloader} from \"../../../../common/preloader/Preloader\";\r\nimport {setProfileFlag} from \"../../../../redux/profile-reducer\";\r\nimport {StatusWithHooks} from \"./Status/StatusWithHooks\";\r\nimport userphoto from \"../../../../assets/images/images.jpg\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileDataForm/ProfileData\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ActionValuesType, RootStateType} from \"../../../../redux/redux-store\";\r\nimport {ProfileType} from \"../../../../redux/types\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    errorMessage: string\r\n    flagEditMode?: boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile,\r\n                                                           status,\r\n                                                           updateStatus,\r\n                                                           saveProfile,\r\n                                                           flagEditMode,\r\n                                                           ...props\r\n                                                       }) => {\r\n\r\n\r\n    const flagEditModeSelector = useSelector<RootStateType, boolean>(state => state.profilepage.flagEditMode)\r\n    const dispatch=useDispatch()\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    let goToEditMode = () => {\r\n        dispatch(setProfileFlag(!flagEditModeSelector))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.ava}>\r\n                <img src={profile.photos.small || userphoto}/>\r\n                <div>\r\n                    {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                    <StatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                    {flagEditModeSelector ?\r\n                        <ProfileDataForm saveProfile={saveProfile}\r\n                                         profile={profile}/>\r\n                        : <ProfileData profile={profile} isOwner={props.isOwner} goToEditMode={goToEditMode}/>}\r\n                    <p className={s.errortext}>{props.errorMessage}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostTypeMap} from \"../../../../redux/Store\";\r\n\r\n\r\n\r\n\r\nexport const Post:React.FC<PostTypeMap>= (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTluB_KJTFuFjPv37y1r9ANOA8s60vcfoM5YA&usqp=CAU\"/>\r\n            {props.message}\r\n            <div className={s.like}>\r\n                {props.likecount}\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTsHRX8t1HF3K4RA3EZk-icklePWdLpfAUlBOzsapp7pZdfdl-_ZYkkVllttQATUl-sao&usqp=CAU\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport s from \"./MyPost.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/types\";\r\n\r\n\r\nexport type TypeMyPost = {\r\n    posts: PostType[]\r\n    addPost: (NewPost: string) => void\r\n}\r\n\r\n\r\nexport const MyPost: React.FC<TypeMyPost>=React.memo((props)=> {\r\n\r\n    let PostElement =[...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likecount={p.likecount}/>)\r\n\r\n\r\n    let onAddPost = (NewPost: string) => {\r\n        props.addPost(NewPost);\r\n    }\r\n    return (\r\n        <div>\r\n            <MyPostForm onAddPost={onAddPost}/>\r\n            <div>\r\n                {PostElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\ntype MyPostFormProps = {\r\n    onAddPost: (NewPost: string) => void\r\n}\r\n\r\ntype MyPostFormErrors = {\r\n    NewPost?: string\r\n}\r\nconst MyPostForm = (props: MyPostFormProps) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            NewPost: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: MyPostFormErrors = {};\r\n            if (values.NewPost.length > 15) {\r\n                errors.NewPost = \"max length 15\"\r\n            }\r\n            return errors\r\n        },\r\n\r\n\r\n        onSubmit: values => {\r\n            props.onAddPost(values.NewPost)\r\n        },\r\n\r\n    });\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <input\r\n            className={formik.errors.NewPost ? s.inputError : s.input}\r\n            id=\"NewPost\"\r\n            name=\"NewPost\"\r\n            type=\"text\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.NewPost}\r\n        />\r\n\r\n        <button type=\"submit\" className={s.button} disabled={!!formik.errors.NewPost}>Отправить</button>\r\n        {formik.errors && <span className={s.spanError}>{formik.errors.NewPost}</span>}\r\n    </form>\r\n\r\n}\r\n","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {ActionValuesType, RootStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {PostType} from \"../../../redux/types\";\r\n\r\n\r\ntype MapDispatch = {\r\n    addPost: (NewPost:string) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    posts: PostType[],\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilepage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionValuesType) => void): MapDispatch => {\r\n    return {\r\n        addPost: (NewPost:string) => {\r\n            dispatch(addPostActionCreator(NewPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect<MapStateToProps,MapDispatch,unknown ,RootStateType>(mapStateToProps, mapDispatchToProps)(MyPost)\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./MyPost/ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/types\";\r\n\r\n\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto:(photo:File)=>void\r\n    saveProfile:(profile:ProfileType)=>void\r\n    errorMessage:string\r\n    flagEditMode:boolean\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                {...props}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileUser,\r\n    getUserStatus,\r\n    setUsersProfile,\r\n    updateUserStatus,\r\n    savePhoto,\r\n    saveProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../redux/types\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    loginUserId: null | number\r\n    errorMessage: string\r\n    flagEditMode: boolean\r\n}\r\ntype  MapDispatch = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    getProfileUser: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype ProfileAPIType = MapDispatch & MapStateToProps\r\n\r\ntype PathParams = {\r\n    userId: string\r\n\r\n}\r\ntype PropsType = RouteComponentProps<PathParams> & ProfileAPIType\r\n\r\nexport class ProfileAPIComponent extends React.Component <PropsType> {\r\n\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.loginUserId)\r\n\r\n            if (userId === \"null\") {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfileUser(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateUserStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n                errorMessage={this.props.errorMessage}\r\n                flagEditMode={this.props.flagEditMode}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n\r\n    return {\r\n        profile: state.profilepage.profile,\r\n        status: state.profilepage.status,\r\n        isAuth: state.auth.isAuth,\r\n        loginUserId: state.auth.userId,\r\n        errorMessage: state.profilepage.errorMessage,\r\n        flagEditMode: state.profilepage.flagEditMode\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, ////////?????????????????????????????????типизация коннект\r\n    {\r\n        setUsersProfile,\r\n        getProfileUser,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }), withRouter)(ProfileAPIComponent)\r\n\r\n"],"sourceRoot":""}